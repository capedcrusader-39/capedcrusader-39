{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a number: 5\n",
      "5  is odd\n"
     ]
    }
   ],
   "source": [
    "#1.1: odd or even\n",
    "a=int(input(\"Enter a number: \"))\n",
    "if a%2==0:\n",
    "    print(a,\" is even\")\n",
    "else:\n",
    "    print(a,\" is odd\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter 1st number: 3\n",
      "Enter 2nd number: 5\n",
      "Enter 3rd number: 1\n",
      "5  is largest\n"
     ]
    }
   ],
   "source": [
    "#1.2: greatest among 3 numbers\n",
    "a=int(input(\"Enter 1st number: \"))\n",
    "b=int(input(\"Enter 2nd number: \"))\n",
    "c=int(input(\"Enter 3rd number: \"))\n",
    "if a>b and a>c:\n",
    "    print(a,\" is largest\")\n",
    "elif b>a and b>c:\n",
    "    print(b,\" is largest\")\n",
    "else:\n",
    "     print(c,\" is largest\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a year: 1900\n",
      "1900  is not a leap year\n"
     ]
    }
   ],
   "source": [
    "#1.3: leap year\n",
    "a=int(input(\"Enter a year: \"))\n",
    "if (a%4==0 and a%100!=0) or (a%400==0 and a%100==0) :\n",
    "    print(a,\" is a leap year\")\n",
    "else:\n",
    "    print(a,\" is not a leap year\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a number: 7\n",
      "7  is prime\n"
     ]
    }
   ],
   "source": [
    "#1.4: prime number\n",
    "n=int(input(\"Enter a number: \"))\n",
    "i=2\n",
    "flag=0\n",
    "while i<n:\n",
    "    if n%i==0 :\n",
    "        flag=1\n",
    "        break\n",
    "    i+=1\n",
    "if flag==0:\n",
    "    print(n,\" is prime\")\n",
    "else:\n",
    "    print(n,\" is composite\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
